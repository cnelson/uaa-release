---
name: login

<%
  def p_opt(property)
    p(property, nil)
  end

  protocol = p('login.protocol')

  uaa_base = p(['uaa.url', 'login.uaa_base'], "#{protocol}://uaa.#{p_opt('domain')}")

  entity_base_url_fallback = uaa_base.sub("://uaa.", "://login.")

  login_entityBaseUrl = nil
  if_p('login.saml.entity_base_url') do |entity_base_url|
    login_entityBaseUrl = "#{protocol}://#{entity_base_url}"
  end .else do
    login_entityBaseUrl = entity_base_url_fallback
  end

  login_entityId = p(['login.saml.entityid', 'login.entity_id'], login_entityBaseUrl.sub(/^http.*:\/\//,''))

  login_authorizeUrl = "#{p('uaa.url', entity_base_url_fallback)}/oauth/authorize"

  login_url = p('login.url', login_entityBaseUrl)

  # The login secret is defined in one of two properties
  # uaa.login.client_secret or uaa.clients.login.secret
  # If both of these are defined, then use the latter
  login_secret = p('uaa.clients.login.secret', p_opt('uaa.login.client_secret'))
  raise ArgumentError, 'uaa.login.client_secret or uaa.clients.login.secret must be set.' unless login_secret
%>

logging:
  config: /var/vcap/jobs/login/config/log4j.properties

uaa:
  url: <%= uaa_base %>
<% if_p('login.links') do |login_links| %>
links: <% login_links.each do |id,url| %>
  <%= id %>: <%= url %><% end %>
<% end %>
<% if_p('login.smtp') do |login_smtp| %>
smtp: <% login_smtp.each do |key,val| %>
  <%= key %>: <%= val %><% end %>
<% end %>
<% if_p('login.tiles') do |login_tiles| %>
tiles: <% login_tiles.each do |tile| %>
- <% tile.each do |key,val| %><%= key %>: <%= val %>
  <% end %>
<% end %>
<% end %>

# The secret that this login server will use to authenticate to the uaa
LOGIN_SECRET: <%= login_secret %>
require_https: <%= p('uaa.require_https') %>
dump_requests: <%= p('uaa.dump_requests') %>
assetBaseUrl: <%= p('login.asset_base_url') %>

<% if_p('login.notifications.url') do |login_notifications_url| %>
notifications:
  url: <%= login_notifications_url %>
<% end %>

logout:
  redirect:
    url: <%= p('login.logout.redirect.url') %>
    parameter:
      disable: <%= p('login.logout.redirect.parameter.disable') %>
      <% if_p('login.logout.redirect.parameter.whitelist') do |whitelist| %>
      whitelist: <% whitelist.each do |whitelistedurl| %>
      - <%= whitelistedurl %><% end %>
   <% end %>

login:
  branding:
  <% if_p('login.branding.company_name') do |company_name| %>
    companyName: <%= company_name %>
  <% end %>
  <% if_p('login.branding.product_logo') do |product_logo| %>
    productLogo: <%= product_logo %>
  <% end %>
  <% if_p('login.branding.square_logo') do |square_logo| %>
    squareLogo: <%= square_logo %>
  <% end %>
  <% if_p('login.branding.footer_legal_text') do |footer_legal_text| %>
    footerLegalText: <%= footer_legal_text %>
  <% end %>
  <% if_p('login.branding.footer_links') do |footer_links| %>
    footerLinks: <% footer_links.each do |key,val| %>
      <%= key %>: <%= val %><% end %>
  <% end %>
<% if_p('login.home_redirect') do |home_redirect| %>
  homeRedirect: <%= home_redirect %>
<% end %>
  url: <%= login_url %>
  entityBaseURL: <%= login_entityBaseUrl %>
  entityID: <%= login_entityId %>
  prompt:
    username:
      text: <%= p('login.prompt.username.text') %>
    password:
      text: <%= p('login.prompt.password.text') %>
  <% if_p('login.saml.serviceProviderCertificate') do |serviceProviderCert| %>
  serviceProviderCertificate: |
    <%= serviceProviderCert.gsub("\n", "\n    ") %>
  <% end %>
  <% if_p('login.saml.serviceProviderKey') do |serviceProviderKey| %>
  serviceProviderKey: |
    <%= serviceProviderKey.gsub("\n", "\n    ")%>
  <% end %>
  <% if_p('login.saml.serviceProviderKeyPassword') do |serviceProviderKeyPassword| %>
  serviceProviderKeyPassword: <%= serviceProviderKeyPassword %>
  <% end %>
  <% if_p('login.self_service_links_enabled') do |selfServiceEnabled| %>
  selfServiceLinksEnabled: <%= selfServiceEnabled %>
  <% end .else_if_p('login.signups_enabled') do |selfServiceEnabled| %>
  selfServiceLinksEnabled: <%= selfServiceEnabled %>
  <% end %>
  oauth:
    <% if_p('login.oauth.providers') do |providers| %>
    providers: <% providers.each do |idpAlias, provider| %>
      <%= idpAlias %> : <% provider.each do |key,value| %>
        <% if key.to_s.eql?('tokenKey') then %>
        tokenKey: |
          <%= value.gsub("\n", "\n            ")%>
        <% elsif key.to_s.eql?('attributeMappings') then %>
        attributeMappings: <% value.each do |key,val| %>
          <%= key %>: <%= val %><% end %>
        <% else %>
        <%= key %>: <%= value %><% end %><% end %>
    <% end %><% end %>
  saml:
    <% if_p('login.saml.signMetaData') do |signMetaData| %>
    signMetaData: <%= signMetaData %>
    <% end %>
    <% if_p('login.saml.signRequest') do |signRequest| %>
    signRequest: <%= signRequest %>
    <% end %>
    <% if_p('login.saml.wantAssertionSigned') do |wantAssertionSigned| %>
    wantAssertionSigned: <%= wantAssertionSigned %>
    <% end %>
    providers: <% if_p('login.saml.providers') do |samlProviders| samlProviders.reject {|k,_| k.to_s == ''}.each do |idpAlias,idpProvider| %>
      <%= idpAlias %>: <% idpProvider.reject {|k,_| %w(idpMetadata idpMetadataXML idpMetadataURL).include?(k.to_s)}.each do |key,value|%>
        <% if key.to_s.eql?('attributeMappings') then %>
        attributeMappings: <% value.each do |key,val| %>
          <%= key %>: <%= val %><% end %>
        <% else %>
        <%= key %>: <%= value.is_a?(String) && value.match("\n") ? "| \n          " + value.gsub("\n", "\n          ") + '' : value %><% end %><% end %>
        idpMetadata: <%= (idpProvider['idpMetadataURL'] || idpProvider['idpMetadataXML'] || idpProvider['idpMetadata']).inspect %><% end %>
    <% end %>
    <% if_p('login.saml.idpEntityAlias') do |idpEntityAlias| %>
      <%= idpEntityAlias %>:
        idpMetadata: <%= p('login.saml.idpMetadataURL', "/var/vcap/jobs/login/#{p_opt('login.saml.idp_metadata_file')}") %>
        assertionConsumerIndex: <%= p_opt('login.saml.assertionConsumerIndex') %>
        nameID: <%= p_opt('login.saml.nameidFormat') %>
        metadataTrustCheck: <%= p_opt('login.saml.metadataTrustCheck') %>
        showSamlLoginLink: true
        linkText: 'Use your corporate credentials'
        <% if_p('login.saml.attributeMappings') do |attributeMappings| %>
        attributeMappings: <% attributeMappings.each do |key,val| %>
          <%= key %>: <%= val %><% end %>
        <% end %>
    <% end %>
    socket:
      connectionManagerTimeout: <%= p_opt('login.saml.socket.connectionManagerTimeout') %>
      soTimeout: <%= p_opt('login.saml.socket.soTimeout') %>
  authorize:
    url: <%= login_authorizeUrl %>

<% if_p('login.analytics.code', 'login.analytics.domain') do |code, domain| %>
analytics:
  code: <%= code %>
  domain: <%= domain %>
<% end %>
